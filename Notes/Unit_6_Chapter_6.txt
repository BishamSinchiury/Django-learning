
## ⏰ Hour 3: Customizing the Form

### Key Concepts:

* Using `widgets` to change form field appearance (e.g., input type, CSS)
* Adding placeholders, labels, help texts
* Changing default error messages
* Initial values and field ordering
* Disabling or hiding fields conditionally

### Practice:

* Style a login form using Bootstrap
* Set default values for fields
* Change input field to date picker using a widget

---

## ⏰ Hour 4: Model Forms Using Model

### Key Concepts:

* What is `ModelForm`
* Why use it: automatic form creation based on models
* Linking a model to a form using `Meta`
* Selecting fields or excluding fields
* Customizing fields in `ModelForm`

### Practice:

* Create a `Student` model
* Create a `StudentForm` using `ModelForm`
* Render the form and save the data to the database

---

## ⏰ Hour 5: Processing the Form Submission

### Key Concepts:

* POST vs GET in form submission
* Accessing form data using `request.POST`
* Validating and saving data from a form
* Redirect after successful submission
* Handling invalid form input

### Practice:

* Create a form view for feedback
* Handle form submission and show a success message
* Show validation errors when submission fails

---

Let me know if you'd like quizzes, slides, or exercises for each hour!


Why Use Forms in Django?
    Forms are essential in web apps for interacting with users — they collect data like login credentials, feedback, or registrations.
    Why Django Forms instead of plain HTML?
        Built-in validation
        Automatic error handling and display
        Easy to render forms in templates
        Clean Python code instead of manual HTML forms
        Integration with Django models (covered later)


Django Forms vs HTML Forms
| Aspect         | HTML Form                        | Django Form                                      |
| -------------- | -------------------------------- | ------------------------------------------------ |
| Validation     | Manual JavaScript or server-side | Built-in Python validation with clean methods    |
| Error Handling | Manual display of errors         | Automatic error messages and form.is\_valid()    |
| Reusability    | Static HTML, manual duplication  | Reusable form classes with field definitions     |
| Rendering      | Write HTML manually              | Use Django template tags for automatic rendering |

Creating a Basic Django Form
Create a form class in forms.py
{{ form.as_p }} renders the form fields wrapped in <p> tags
{% csrf_token %} protects against Cross-Site Request Forgery


What is Validation?
    Validation is the process of checking user input to ensure it meets certain rules or constraints before saving or processing it.

Why is it necessary?
    Protects your app from invalid or malicious data
    Ensures data integrity (e.g., email must be a valid format)
    Provides a better user experience by showing helpful error messages
    Prevents security issues like injection attacks or bad input

Built-in Validators in Django Forms
    Django automatically adds some validations:
    | Validator                 | Description                            | Example                                  |
    | ------------------------- | -------------------------------------- | ---------------------------------------- |
    | `required=True`           | Field must not be empty (default True) | `name = forms.CharField()`               |
    | `max_length`              | Limits maximum number of characters    | `name = forms.CharField(max_length=50)`  |
    | `EmailField`              | Checks for valid email format          | `email = forms.EmailField()`             |
    | `min_value` & `max_value` | For number range validation            | `age = forms.IntegerField(min_value=18)` |

These validators run automatically when you call form.is_valid().

Writing Custom Validation
    Sometimes built-in validators are not enough. You can create custom validation by defining methods inside your form class.
    Field-specific validation with clean_<fieldname>()
    example: Unit6/forms.py

Form-wide validation with clean()
    For validations involving multiple fields or cross-field checks:
    Example: Unit6/forms.py

Displaying Validation Errors in Template
    When form.is_valid() fails, errors are stored in form.errors and displayed automatically when rendering the form with {{ form.as_p }} or individually by field: